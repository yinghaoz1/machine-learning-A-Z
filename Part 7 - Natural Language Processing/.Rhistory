# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
# Natural Language Processing
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# Cleaning the texts
# install.packages('tm')
# install.packages('SnowballC')
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
# Natural Language Processing
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# Cleaning the texts
# install.packages('tm')
# install.packages('SnowballC')
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# Cleaning the texts
# install.packages('tm')
# install.packages('SnowballC')
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
setwd("~/Desktop/Machine Learning A-Z/Part 7 - Natural Language Processing")
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# Cleaning the texts
# install.packages('tm')
# install.packages('SnowballC')
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
# Cleaning the texts
# install.packages('tm')
# install.packages('SnowballC')
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating the Bag of Words model
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
head(dataset_original)
# Cleaning the texts
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
as.character(corpus[[1]])
# Creating the bag of words model and filtering the non-frequent words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dtm
# Converting dtm to the dataset
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
head(dataset)
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the training and test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting naive Bayes to the training set
library(e1071)
classifier = naiveBayes(x = training_set[-692],
y = training_set$Liked)
# Predicting the test set results
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting naive Bayes to the training set
library(e1071)
classifier = naiveBayes(x = training_set[-692],
y = training_set$Liked)
# Predicting the test set results
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
# Making the confusion matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting Random Forest Classification to the Training set
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting logistic regression to the training set
classifier = glm(formula = Liked ~ .,
family = binomial,
data = training_set)
# Predicting the test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set[-692])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred
# Making the confusion matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting naive Bayes to the training set
library(e1071)
classifier = naiveBayes(x = training_set[-692],
y = training_set$Liked)
# Predicting the test set results
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
# Making the confusion matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting naive Bayes to the training set
library(e1071)
classifier = naiveBayes(x = training_set[-692],
y = training_set$Liked)
# Predicting the test set results
y_pred = predict(classifier, newdata = test_set[-692])
y_pred
# Making the confusion matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting K-NN to the training set and predicing the test set results
library(class)
y_pred = knn(train = training_set[, -3],
test = test_set[, -3],
cl = training_set[, 3],
k = 5)
y_pred
# Fitting K-NN to the training set and predicing the test set results
library(class)
y_pred = knn(train = training_set[, -692],
test = test_set[, -692],
cl = training_set[, 692],
k = 5)
y_pred
# Making the confusion matrix
cm = table(test_set[, 3], y_pred)
cm
# Making the confusion matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting SVM to the training set
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Fitting SVM to the training set
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the test set results
y_pred = predict(classifier, newdata = test_set[-692])
y_pred
# Making the confusion matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting SVM to the training set
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the test set results
y_pred = predict(classifier, newdata = test_set[-692])
y_pred
# Making the confusion matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting naive Bayes to the training set
library(e1071)
classifier = naiveBayes(x = training_set[-692],
y = training_set$Liked)
# Predicting the test set results
y_pred = predict(classifier, newdata = test_set[-692])
y_pred
# Making the confusion matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting the classifier to the training set
library(rpart)
classifier = rpart(formula = Purchased ~ .,
data = training_set)
# Fitting the classifier to the training set
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692], type = 'class')
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
# Importing the dataset
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
head(dataset_original)
# Cleaning the texts
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
as.character(corpus[[1]])
# Creating the bag of words model and filtering the non-frequent words
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dtm
# Converting dtm to the dataset
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
head(dataset)
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the training and test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting logistic regression to the training set
classifier = glm(formula = Liked ~ .,
family = binomial,
data = training_set)
# Predicting the test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set[-692])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
y_pred
# Making the confusion matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting K-NN to the training set and predicing the test set results
library(class)
y_pred = knn(train = training_set[, -692],
test = test_set[, -692],
cl = training_set[, 692],
k = 5)
y_pred
# Making the confusion matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting SVM to the training set
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the test set results
y_pred = predict(classifier, newdata = test_set[-692])
y_pred
# Making the confusion matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting SVM to the training set
library(e1071)
classifier = svm(formula = Liked ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the test set results
y_pred = predict(classifier, newdata = test_set[-692])
y_pred
# Making the confusion matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting naive Bayes to the training set
library(e1071)
classifier = naiveBayes(x = training_set[-692],
y = training_set$Liked)
# Predicting the test set results
y_pred = predict(classifier, newdata = test_set[-692])
y_pred
# Making the confusion matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting the classifier to the training set
library(rpart)
classifier = rpart(formula = Liked ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692], type = 'class')
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
# Fitting Random Forest Classification to the Training set
library(randomForest)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
