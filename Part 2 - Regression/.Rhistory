2+2
install.packages('tidyverse')
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
tidyverse_update()
install.packages("haven")
install.packages("haven")
library(tidyverse)
install.packages(c("nycflights13", "gapminder", "Lahman"))
print("Hello World!")
plot(cars)
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
setwd("~/Desktop/Machine Learning A-Z/Machine Learning A-Z Codes/Part 2 - Regression")
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the training set and test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio=2/3)
training_set = subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
# Fitting simple linear regression to the training set
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
# Predict the test set results
y_pred = predict(regressor, newdata=test_set)
# Visualizing the training set results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
color='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor, newdata=training_set)),
color='blue') +
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
# Visualizing the training set results
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
color='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor, newdata=training_set)),
color='blue') +
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
```{r}
# Visualizing the test set results
ggplot() +
geom_point(aes(x=test_set$YearsExperience, y=test_set$Salary),
color='orange') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor, newdata=training_set)),
color='blue') +
ggtitle('Salary vs Experience (Test Set)') +
xlab('Years of Experience') +
ylab('Salary')
# Visualizing the training set results
library(ggplot2)
ggplot() +
geom_point(aes(x=training_set$YearsExperience, y=training_set$Salary),
color='red') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor, newdata=training_set)),
color='blue') +
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
# Visualizing the test set results
ggplot() +
geom_point(aes(x=test_set$YearsExperience, y=test_set$Salary),
color='orange') +
geom_line(aes(x=training_set$YearsExperience, y=predict(regressor, newdata=training_set)),
color='blue') +
ggtitle('Salary vs Experience (Test Set)') +
xlab('Years of Experience') +
ylab('Salary')
# Splitting the dataset into the training set and test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Predict the test set results
y_pred = predict(regressor, newdata = test_set)
# Visualizing the training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
color = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
color = 'blue') +
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
# Visualizing the test set results
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
color = 'orange') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
color = 'blue') +
ggtitle('Salary vs Experience (Test Set)') +
xlab('Years of Experience') +
ylab('Salary')
# Building the optimal model using backward elimination
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
plot(cars)
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the training set and test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting simple linear regression to the training set
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
# Predict the test set results
y_pred = predict(regressor, newdata = test_set)
# Visualizing the training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
color = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
color = 'blue') +
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
# Visualizing the test set results
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
color = 'orange') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
color = 'blue') +
ggtitle('Salary vs Experience (Test Set)') +
xlab('Years of Experience') +
ylab('Salary')
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the training and test set
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fit multiple linear regression to the training set
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the test results
y_pred = predict(regressor, newdata = test_set)
# Building the optimal model using backward elimination
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
# Automatic backward elimination
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
